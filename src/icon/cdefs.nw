\section{Finding definitions in ANSI C}
<<*>>=
global decls_ok
procedure main(args)
  decls_ok := !args == "-decl"
  go()
end
<<*>>=
global typespecs, storespecs, typequals, otherspecs, structlike
procedure postpass(name, arg)
  local tok, stat
  static kind
  initial {
    kind := "bogus"
    storespecs := set(["typedef", "extern", "static", "auto", "register"])
    typespecs := set(["void", "char", "float", "short", "signed", 
                      "int", "double", "long", "unsigned"])
    typequals := set(["const", "volatile"])
    otherspecs := storespecs ++ typequals
    structlike := set(["struct", "union", "enum"])
  }
  case name of {
    "begin" : arg ? kind := tab(upto(' ')|0)
    "text" : arg ? {
        if kind ~== "code" then return
        if any(' \t') then return
        if (="#define", tab(many(' \t'))) then return wd(c_ident_token())
        if find("dclproto") then return
        if ="}" then {
          if c_ident_token() == "while" then fail # don't get tripped by do { ... } while
          <<eat declarators>>
        } else {
	  specifier_count := 0
          stat := &null		# haven't seen static yet
          seenType := &null
          while (
            (/decls_ok & c_ident_token() == "extern", return)         |
            (member(typespecs, c_ident_token()), seenType := 1) | # swallow type
            (member(otherspecs, tok := c_ident_token()), 
                          stat := look_for_static(stat, tok)) | # swallow a specifier
            (member(structlike, c_ident_token()),          # struct with optional tag
             c_ident_token() | &null) |
            (/seenType, any(&ucase, c_ident_token()), seenType := 1)
         	                                        # assume a typedef'd type, skip
          ) do
            specifier_count +:= 1
## write(&errout, "skipped ", specifier_count, " specifiers")
          if f := scan_function() then
            if /decls_ok & c_token() == (";"|",") then fail else {
##		write(&errout, "function ", image(f), " followed by ", 
##		      image(c_token()) | "<EOL>")
              wd(f, stat)
              return
            }
          if specifier_count > 0 then {<<eat declarators>>}
       }
     }
  }
  return
end
<<eat declarators>>=
while x := declarator() do {
  wd(x, stat)
  if c_token() == "," then &null else return
}
<<*>>=
procedure wd(x, stat)
  static reserved
  initial reserved := set([
        "asm", "auto", "break", "case", "char", "const", "continue",
        "default", "double", "do", "else", "enum", "extern", "float", "for",
        "goto", "if", "int", "long", "register", "return", "short",
        "signed", "sizeof", "static", "struct", "switch", "typedef", "union",
        "unsigned", "void", "volatile", "while"])
  if member(reserved, x) then return
  return writedefn(x, stat)
end

procedure prepass(name, arg)
  return
end

procedure c_ident_token()
  static alpha, alnum
  initial { alpha := '_' ++ &letters; alnum := alpha ++ &digits }
  tab(many(' \t'))
  if any(alpha) then suspend tab(many(alnum))
end

procedure c_token()
  static alpha, alnum
  initial { alpha := '_' ++ &letters; alnum := alpha ++ &digits }
  tab(many(' \t'))
  if any(alpha) then suspend tab(many(alnum)) else suspend move(1)
end

procedure scan_function()
  (f := c_ident_token(),
#write(&errout, "  try function ", image(f)),
   tab(many(' \t')) | &null,
   any('('),
   *tab(bal()) > 0 |
      (="(", *tab(bal(',', '[{(', ')}]')) > 0, =",", optwhite(), pos(0)),
#write(&errout, "  caught function trailing ", image(&subject[&pos:0])),
   suspend f
  )
end

procedure optwhite()
  suspend tab(many(' \t')) | ""
end

procedure declarator()
  while c_token() == "*" do 
    while member(typequals, c_token())
  (c_token() == "(", d := declarator(), c_token() == ")") |
  (d := c_ident_token()) |
  fail
  while c_token() == ("[", "(") do
    (tab(bal('])','[(',')]')), c_token())
  return d
end
<<*>>=
procedure look_for_static(stat, tok)
  return (tok == "static") | stat
end
<<*>>=
procedure rcsinfo () 
  return "$Id: cdefs.nw,v 1.16 2006/06/12 21:03:54 nr Exp nr $" ||
         "$Name: v2_11b $"
end
@
